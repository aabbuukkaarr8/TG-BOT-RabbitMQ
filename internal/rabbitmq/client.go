package rabbitmq

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/aabbuukkaarr8/TG-BOT/internal/models"
	"log"

	amqp "github.com/rabbitmq/amqp091-go"
)

// Client –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ
type Client struct {
	conn    *amqp.Connection
	channel *amqp.Channel
}

func New(url string) (*Client, error) {

	conn, err := amqp.Dial(url) // "amqp://guest:guest@localhost:5672/"
	if err != nil {
		return nil, fmt.Errorf("failed to connect to RabbitMQ: %w", err)
	}

	channel, err := conn.Channel()
	if err != nil {
		return nil, fmt.Errorf("failed to open channel: %w", err)
	}

	err = channel.ExchangeDeclare(
		"notifications_exchange",
		"direct",
		true,
		false,
		false,
		false,
		nil,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to declare exchange: %w", err)
	}

	// 4. –°–û–ó–î–ê–ï–ú –û–ß–ï–†–ï–î–¨ - "–ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫" –≥–¥–µ –ª–µ–∂–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	_, err = channel.QueueDeclare(
		"notifications_queue", // –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
		true,
		false,
		false,
		false,
		nil,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to declare queue: %w", err)
	}

	err = channel.QueueBind(
		"notifications_queue",    // –æ—á–µ—Ä–µ–¥—å
		"notification",           // routing key - "–∞–¥—Ä–µ—Å" —Å–æ–æ–±—â–µ–Ω–∏—è
		"notifications_exchange", // exchange
		false,                    // no-wait
		nil,                      // arguments
	)
	if err != nil {
		return nil, fmt.Errorf("failed to bind queue: %w", err)
	}

	log.Println("RabbitMQ connected and configured")
	return &Client{conn: conn, channel: channel}, nil
}

// PublishNotification –ö–ò–î–ê–ï–¢ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ RabbitMQ
func (c *Client) PublishNotification(ctx context.Context, notification *models.Notification) error {
	// –ü–†–ï–û–ë–†–ê–ó–£–ï–ú —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ JSON
	body, err := json.Marshal(notification)
	if err != nil {
		return fmt.Errorf("failed to marshal notification: %w", err)
	}

	// –ü–£–ë–õ–ò–ö–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ RabbitMQ
	err = c.channel.PublishWithContext(
		ctx,
		"notifications_exchange", // exchange - –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
		"notification",           // routing key - "–∞–¥—Ä–µ—Å" —Å–æ–æ–±—â–µ–Ω–∏—è
		false,
		false,
		amqp.Publishing{
			ContentType: "application/json", // —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
			Body:        body,               // —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
			// –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç persistent - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ –¥–∏—Å–∫
			DeliveryMode: amqp.Persistent,
		},
	)

	if err != nil {
		return fmt.Errorf("failed to publish message: %w", err)
	}

	log.Printf("üì® Notification %s published to RabbitMQ", notification.ID)
	return nil
}

// ConsumeNotifications –ü–û–õ–£–ß–ê–ï–¢ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
func (c *Client) ConsumeNotifications() (<-chan amqp.Delivery, error) {

	messages, err := c.channel.Consume(
		"notifications_queue",
		"",
		false,
		false,
		false,
		false,
		nil,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to consume messages: %w", err)
	}

	log.Println("üëÇ Started consuming messages from RabbitMQ")
	return messages, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ
func (c *Client) Close() {
	c.channel.Close()
	c.conn.Close()
}
